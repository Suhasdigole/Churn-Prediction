# -*- coding: utf-8 -*-
"""pycaret.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/Suhasdigole/d8d66db006ca9f1146b72a16e8d89cf9/pycaret.ipynb
"""

pip install pycaret



from google.colab import files
uploaded = files.upload()

import pandas as pd

data = pd.read_csv('churn_test.csv')
data.head()  # To preview the data

data.select_dtypes(include='object').columns.tolist()

from pycaret.classification import *

clf = setup(data=data,
            target='Churn',
            categorical_features=['Gender', 'Subscription Type', 'Contract Length'],
            session_id=123,
            normalize=True)

best_model = compare_models()

final_model = finalize_model(best_model)
predictions = predict_model(final_model)

evaluate_model(final_model)

import pandas as pd

# Create sample data
data = {
    'cust_id': [f'CUST{i:04}' for i in range(1, 11)],
    'Gender': ['Male', 'Female', 'Female', 'Male', 'Female', 'Male', 'Male', 'Female', 'Male', 'Female'],
    'Subscription Type': ['Basic', 'Premium', 'Enterprise', 'Premium', 'Basic', 'Enterprise', 'Basic', 'Premium', 'Enterprise', 'Basic'],
    'Contract Length': ['Month-to-month', 'One year', 'Two year', 'Month-to-month', 'Two year', 'One year', 'Month-to-month', 'Two year', 'One year', 'Month-to-month'],
    'tenure': [3, 12, 24, 5, 20, 15, 2, 30, 10, 1],
    'monthlycharges': [29.99, 59.99, 79.99, 49.99, 89.99, 69.99, 39.99, 99.99, 59.99, 19.99],
    'totalcharges': [89.97, 719.88, 1919.76, 249.95, 1799.80, 1049.85, 79.98, 2999.70, 599.90, 19.99],
}

df = pd.DataFrame(data)

# Save as CSV
df.to_csv('sample_churn_customers.csv', index=False)

df.head()

from google.colab import files
files.download('sample_churn_customers.csv')

import pandas as pd
from pycaret.classification import load_model, predict_model

from google.colab import files
uploaded = files.upload()  # Choose sample_churn_customers.csv

data = pd.read_csv('sample_churn.csv')



model = load_model('churn_model')

# prompt: now i want to train my data

model_data = predict_model(model, data=data)
model_data

import seaborn as sns
import matplotlib.pyplot as plt

# Set beautiful theme
sns.set_theme(style="whitegrid")

# Create the plot
plt.figure(figsize=(8, 5))
ax = sns.countplot(x='prediction_label', data=model_data, palette='coolwarm')

# Customizing tick labels
ax.set_xticklabels(['No Churn', 'Churn'], fontsize=12)
plt.title('ðŸ“‰ Customer Churn Prediction Summary', fontsize=16, weight='bold')
plt.xlabel('Prediction Label', fontsize=12)
plt.ylabel('Number of Customers', fontsize=12)

# Add counts on top of bars
for p in ax.patches:
    height = p.get_height()
    ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2., height),
                ha='center', va='bottom', fontsize=12, fontweight='bold')

# Add legend manually
custom_legend = ['No Churn', 'Churn']
plt.legend(title='Prediction', labels=custom_legend, loc='upper right')

plt.tight_layout()
plt.show()

model_data['Age_Group'] = pd.cut(model_data['Age'], bins=[18,30,40,50,60,70], labels=['18â€“30','31â€“40','41â€“50','51â€“60','61â€“70'])
age_group_data = model_data.groupby(['Age_Group', 'prediction_label']).size().unstack().fillna(0)

age_group_data.plot(kind='line', marker='o', figsize=(8,5), colormap='coolwarm')
plt.title('Churn Trend Across Age Groups')
plt.ylabel('Customer Count')
plt.xlabel('Age Group')
plt.legend(['No Churn', 'Churn'])
plt.grid(True)
plt.show()



"""End of the code.

We have used pycaret to train the data file with churn customers.
We trained the data on the parameters like ['Gender', 'Subscription Type', 'Contract Length']

We choose the best fit ml model XG-Boost which serves the purpose the most

Now since the model is trained we used this model to check the churn of the customers of the sample data and it predicted the churn rate accurately as per the model.

Gave graphical representation at last.

XGBoost is one of the best choices for churn classification â€” and if PyCaret selected it as the best-performing model, it likely outperformed other algorithms (like Logistic Regression, Random Forest, etc.) during compare_models().
"""

